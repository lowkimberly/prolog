
% make position2, that takes 4 args to keeptrack of index.
position(X,[H|T],Res):- position2(X,[H|T],Res,1).

% if empty, add empty list
% if X == H, add the current index, then position2 on the tail.
% if x!= h, skip adding index.
position2(_X, [], Res, _Index):- Res = [].
position2(X, [H|T], Res, Index):-
	X == H, NewIndex is Index+1, position2(X,T,NewRes,NewIndex),  Res = [Index|NewRes]. 
position2(X, [H|T], Res, Index):-
	X \== H, NewIndex is Index+1, position2(X,T,NewRes,NewIndex), Res is NewRes.

%%%%%%%%%
%2. delnterm
%E.g. | ?- delNTerm(3,f(2,3,4,5,6,7,8),Res).
%Res = f(2,3,5,6,8).

% pass to second function keeping track of original N, also remove functor name, add it back later.
delNTerm(N, Term, Res) :- Term=..[H1, H2|T], delNTerm(N, N, [H2|T], Res2), Res=..[H1|Res2].
% list is empty? return.
delNTerm(_OrigN, _Nth, [], Res) :- Res = [].
% Nth is one, start all over again, Res does not have H1 added to it because we're deleting it
delNTerm(OrigN, 1, [_H1,H2|T], Res) :-
	NewArgs = [H2|T], delNTerm(OrigN, OrigN, NewArgs, NewRes), Res is NewRes.
% Nth not yet equal to 1? delNTerm with the tail, Add H1 to front of res.
delNTerm(OrigN, Nth, [H1,H2|T], Res) :-
	NewArgs = [H2|T], NewNth is Nth-1, delNTerm(OrigN, NewNth, NewArgs, NewRes), Res = [H1|NewRes].  
% 1 item left? Return.
delNTerm(_OrigN,_Nth,[H1],Res) :- Res = [H1].    

%%%%%%%%%
%3. Convert
%convert([1,2,3,4], Res)

% remove the head, which we multiply by nothing. everything else is a multiple of 10.
convert([H|T], Res):- convert(T, Res2, 1), Res is H + Res2.
% if empty, add 0.
convert([], Res, N):- Res is 0.
% Multiply last N by 10, multiply that by H, convert rest of number.
convert([H|T], Res, N):- Exp is 10*N, convert(T, Res2, Exp), Res is (H*Exp + Res2).   

%%%%%%%%%
%4. replace_first_k
%replaces the first K occurrences of 1 in L with 8 and stores the result in Res.
%e.g. | ?- replace_first_k(3, [2,1,3,1,4,1,5,1,6,1] , Res).
%Res = [2,8,3,8,4,8,5,1,6,1].

% if k is 0, just return the list itself
replace_first_k(0, [H|T], Res):- Res = [H|T].
% if h is 1, add 8 to Res, decrement K, continue with tail
replace_first_k(K, [H|T], Res):- K > 0, H==1, NewK is K-1, replace_first_k(NewK, T, Res2), Res = [8|Res2].
% if h does not equal 1, continue with tail
replace_first_k(K, [H|T], Res):- K > 0, H\==1, replace_first_k(K, T, Res2), Res = [H|Res2].